{"category":"TCP_Blockly","color":"#fab829","blocks":["__TCP_Blockly_Connection","__TCP_Blockly_send","__TCP_Blockly_recev"],"jscode":"// Block __TCP_Blockly_Connection\nvar __TCP_Blockly_Connection_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Connection\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Host\"\n        },\n        {\n            \"type\": \"field_input\",\n            \"text\": \"\",\n            \"spellcheck\": false,\n            \"name\": \"Host\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Port\"\n        },\n        {\n            \"type\": \"field_number\",\n            \"value\": 0,\n            \"name\": \"Port\"\n        }\n    ],\n    \"colour\": \"#fab829\"\n};\n\nwindow['Blockly'].Blocks['__TCP_Blockly_Connection'] = {\n    init: function() {\n        this.jsonInit(__TCP_Blockly_Connection_json);\n    }\n};\n\nwindow['Blockly'].Python['__TCP_Blockly_Connection'] = function(block) {\n    var Host = block.getFieldValue('Host');\nvar Port = block.getFieldValue('Port');\n    return [`{'Host': '${Host}', 'Port': ${Port}}`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __TCP_Blockly_send\nvar __TCP_Blockly_send_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"TCP_send\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Connection\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"Connection\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Data\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"Data\"\n        }\n    ],\n    \"colour\": \"#fab829\"\n};\n\nwindow['Blockly'].Blocks['__TCP_Blockly_send'] = {\n    init: function() {\n        this.jsonInit(__TCP_Blockly_send_json);\n    }\n};\n\nwindow['Blockly'].Python['__TCP_Blockly_send'] = function(block) {\n    var Connection = Blockly.Python.valueToCode(block, 'Connection', Blockly.Python.ORDER_NONE);\nvar Data = Blockly.Python.valueToCode(block, 'Data', Blockly.Python.ORDER_NONE);\n    return `import socket\nConnection = ${Connection}\nData = ${Data}\n__TCP_Recv_Data = 'hoge'\ntry:\n  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n  s.connect((Connection['Host'], Connection ['Port']))\n  s.send(Data)\n  __TCP_Recv_Data = s.recv(1023)\nfinally:\n  s.close()` + \"\\n\";\n};\n\n// Block __TCP_Blockly_recev\nvar __TCP_Blockly_recev_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"TCP_recv\"\n        }\n    ],\n    \"colour\": \"#fab829\"\n};\n\nwindow['Blockly'].Blocks['__TCP_Blockly_recev'] = {\n    init: function() {\n        this.jsonInit(__TCP_Blockly_recev_json);\n    }\n};\n\nwindow['Blockly'].Python['__TCP_Blockly_recev'] = function(block) {\n        return [`__TCP_Recv_Data`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","code":{"Connection":["window['Blockly'].Python['__TCP_Blockly_Connection'] = function(block) {\n    var Host = block.getFieldValue('Host');\nvar Port = block.getFieldValue('Port');\n    return [`{'Host': '${Host}', 'Port': ${Port}}`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","{'Host': '${Host}', 'Port': ${Port}}"],"send":["window['Blockly'].Python['__TCP_Blockly_send'] = function(block) {\n    var Connection = Blockly.Python.valueToCode(block, 'Connection', Blockly.Python.ORDER_NONE);\nvar Data = Blockly.Python.valueToCode(block, 'Data', Blockly.Python.ORDER_NONE);\n    return `import socket\nConnection = ${Connection}\nData = ${Data}\n__TCP_Recv_Data = 'hoge'\ntry:\n  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n  s.connect((Connection['Host'], Connection ['Port']))\n  s.send(Data)\n  __TCP_Recv_Data = s.recv(1023)\nfinally:\n  s.close()` + \"\\n\";\n};\n\n","import socket\nConnection = ${Connection}\nData = ${Data}\n__TCP_Recv_Data = 'hoge'\ntry:\n  s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n  s.connect((Connection['Host'], Connection ['Port']))\n  s.send(Data)\n  __TCP_Recv_Data = s.recv(1023)\nfinally:\n  s.close()"],"recev":["window['Blockly'].Python['__TCP_Blockly_recev'] = function(block) {\n        return [`__TCP_Recv_Data`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","__TCP_Recv_Data"]}}